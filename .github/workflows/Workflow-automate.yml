name: Release Drafter Workflow

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - edited

permissions:
  contents: write  # Allows GitHub Actions to update content

jobs:
  update_release_drafter:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Checkout the repository code

      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml  # Use your custom release drafter config file
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide GitHub token for API access

      # Get the latest release tag (to increment version)
      - name: Get Latest Release Tag
        id: get-version
        run: |
          # Fetch the latest release version
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name')

          if [ "$VERSION" == "null" ]; then
            VERSION="v0.1.0"  # Default version if no release is found
          fi

          # Increment the version
          VERSION_PARTS=(${VERSION//./ })
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          VERSION="v${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH"  # Increment the patch version

          echo "version=$VERSION" >> $GITHUB_ENV
          echo "New version tag is: $VERSION"  # Display the new version

      # Create a new Git tag based on the fetched or incremented version number
      - name: Create Git Tag
        run: |
          git tag "$VERSION"  # Create the Git tag
          git push origin "$VERSION"  # Push the tag to GitHub

      # Publish the Release using the created Git tag
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}  # Use the newly created tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Provide GitHub token for release creation
